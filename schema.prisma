generator drizzle {
  provider = "drizzle-prisma-generator"
  output   = "./drizzle" // Where to put generated Drizle tables
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model UserApiLimit {
  id        String   @id @default(cuid())
  userId    String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_id")
}

model Category {
  id     String  @id @default(uuid())
  name   String
  alters Alter[]
}

model Alter {
  id           String @id @default(uuid())
  userId       String
  userName     String
  src          String
  name         String @db.Text
  description  String
  instructions String @db.Text
  seed         String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId String

  category Category @relation(fields: [categoryId], references: [id])

  messages Message[]
  // @@fulltext([name])

  @@index([categoryId])
}

enum Role {
  user
  system
}

model Message {
  id        String   @id @default(uuid())
  role      Role
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  alterId String
  userId  String

  alter Alter @relation(fields: [alterId], references: [id], onDelete: Cascade)

  @@index([alterId])
}

model BookmarksCategory {
  id   String @id @default(uuid())
  name String

  bookmarks Bookmarks[]
}

model Bookmarks {
  id String @id @default(uuid())

  userId      String
  src         String
  name        String @db.Text()
  url         String @db.Text()
  description String @db.Text()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId String
  category   BookmarksCategory @relation(fields: [categoryId], references: [id])

  tags String @db.Text()
  //@@fulltext([name, tags])

  @@index([categoryId])
}
